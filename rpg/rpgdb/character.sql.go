// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: character.sql

package rpgdb

import (
	"context"
)

const createCharacter = `-- name: CreateCharacter :one
INSERT INTO
    character_state (
        user_id,
        class_id,
        character_level,
        experience,
        health,
        mana,
        strength,
        dexterity,
        intelligence
    )
VALUES
    (
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?
    ) RETURNING user_id, class_id, character_level, experience, health, mana, strength, dexterity, intelligence, event_id, timestamp
`

type CreateCharacterParams struct {
	UserID         string `json:"user_id"`
	ClassID        string `json:"class_id"`
	CharacterLevel int64  `json:"character_level"`
	Experience     int64  `json:"experience"`
	Health         int64  `json:"health"`
	Mana           int64  `json:"mana"`
	Strength       int64  `json:"strength"`
	Dexterity      int64  `json:"dexterity"`
	Intelligence   int64  `json:"intelligence"`
}

func (q *Queries) CreateCharacter(ctx context.Context, arg CreateCharacterParams) (CharacterState, error) {
	row := q.db.QueryRowContext(ctx, createCharacter,
		arg.UserID,
		arg.ClassID,
		arg.CharacterLevel,
		arg.Experience,
		arg.Health,
		arg.Mana,
		arg.Strength,
		arg.Dexterity,
		arg.Intelligence,
	)
	var i CharacterState
	err := row.Scan(
		&i.UserID,
		&i.ClassID,
		&i.CharacterLevel,
		&i.Experience,
		&i.Health,
		&i.Mana,
		&i.Strength,
		&i.Dexterity,
		&i.Intelligence,
		&i.EventID,
		&i.Timestamp,
	)
	return i, err
}

const deleteCharacter = `-- name: DeleteCharacter :exec
DELETE FROM
    character_state
WHERE
    user_id = ?
`

func (q *Queries) DeleteCharacter(ctx context.Context, userID string) error {
	_, err := q.db.ExecContext(ctx, deleteCharacter, userID)
	return err
}

const readCharacter = `-- name: ReadCharacter :one
SELECT
    user_id, class_id, character_level, experience, health, mana, strength, dexterity, intelligence, event_id, timestamp
FROM
    character_state
WHERE
    user_id = ?
ORDER BY
    timestamp DESC
LIMIT
    1
`

func (q *Queries) ReadCharacter(ctx context.Context, userID string) (CharacterState, error) {
	row := q.db.QueryRowContext(ctx, readCharacter, userID)
	var i CharacterState
	err := row.Scan(
		&i.UserID,
		&i.ClassID,
		&i.CharacterLevel,
		&i.Experience,
		&i.Health,
		&i.Mana,
		&i.Strength,
		&i.Dexterity,
		&i.Intelligence,
		&i.EventID,
		&i.Timestamp,
	)
	return i, err
}

const updateCharacter = `-- name: UpdateCharacter :one
INSERT INTO
    character_state (
        user_id,
        class_id,
        character_level,
        experience,
        health,
        mana,
        strength,
        dexterity,
        intelligence
    )
VALUES
    (
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?
    ) RETURNING user_id, class_id, character_level, experience, health, mana, strength, dexterity, intelligence, event_id, timestamp
`

type UpdateCharacterParams struct {
	UserID         string `json:"user_id"`
	ClassID        string `json:"class_id"`
	CharacterLevel int64  `json:"character_level"`
	Experience     int64  `json:"experience"`
	Health         int64  `json:"health"`
	Mana           int64  `json:"mana"`
	Strength       int64  `json:"strength"`
	Dexterity      int64  `json:"dexterity"`
	Intelligence   int64  `json:"intelligence"`
}

func (q *Queries) UpdateCharacter(ctx context.Context, arg UpdateCharacterParams) (CharacterState, error) {
	row := q.db.QueryRowContext(ctx, updateCharacter,
		arg.UserID,
		arg.ClassID,
		arg.CharacterLevel,
		arg.Experience,
		arg.Health,
		arg.Mana,
		arg.Strength,
		arg.Dexterity,
		arg.Intelligence,
	)
	var i CharacterState
	err := row.Scan(
		&i.UserID,
		&i.ClassID,
		&i.CharacterLevel,
		&i.Experience,
		&i.Health,
		&i.Mana,
		&i.Strength,
		&i.Dexterity,
		&i.Intelligence,
		&i.EventID,
		&i.Timestamp,
	)
	return i, err
}
