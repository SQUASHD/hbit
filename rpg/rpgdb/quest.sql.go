// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: quest.sql

package rpgdb

import (
	"context"
)

const createQuest = `-- name: CreateQuest :one
INSERT INTO
    quest (id, title, description, requirements, rewards)
VALUES
    (?, ?, ?, ?, ?) RETURNING id, title, description, requirements, rewards
`

type CreateQuestParams struct {
	ID           string  `json:"id"`
	Title        string  `json:"title"`
	Description  string  `json:"description"`
	Requirements *string `json:"requirements"`
	Rewards      *string `json:"rewards"`
}

func (q *Queries) CreateQuest(ctx context.Context, arg CreateQuestParams) (Quest, error) {
	row := q.db.QueryRowContext(ctx, createQuest,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Requirements,
		arg.Rewards,
	)
	var i Quest
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Requirements,
		&i.Rewards,
	)
	return i, err
}

const deleteQuest = `-- name: DeleteQuest :exec
DELETE FROM
    quest
WHERE
    id = ?
`

func (q *Queries) DeleteQuest(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteQuest, id)
	return err
}

const listQuests = `-- name: ListQuests :many
SELECT
    id, title, description, requirements, rewards
FROM
    quest
`

func (q *Queries) ListQuests(ctx context.Context) ([]Quest, error) {
	rows, err := q.db.QueryContext(ctx, listQuests)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Quest
	for rows.Next() {
		var i Quest
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Requirements,
			&i.Rewards,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readQuest = `-- name: ReadQuest :one
SELECT
    id, title, description, requirements, rewards
FROM
    quest
WHERE
    id = ?
`

func (q *Queries) ReadQuest(ctx context.Context, id string) (Quest, error) {
	row := q.db.QueryRowContext(ctx, readQuest, id)
	var i Quest
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Requirements,
		&i.Rewards,
	)
	return i, err
}

const updateQuest = `-- name: UpdateQuest :one
UPDATE
    quest
SET
    title = ?,
    description = ?,
    requirements = ?,
    rewards = ?
WHERE
    id = ? RETURNING id, title, description, requirements, rewards
`

type UpdateQuestParams struct {
	Title        string  `json:"title"`
	Description  string  `json:"description"`
	Requirements *string `json:"requirements"`
	Rewards      *string `json:"rewards"`
	ID           string  `json:"id"`
}

func (q *Queries) UpdateQuest(ctx context.Context, arg UpdateQuestParams) (Quest, error) {
	row := q.db.QueryRowContext(ctx, updateQuest,
		arg.Title,
		arg.Description,
		arg.Requirements,
		arg.Rewards,
		arg.ID,
	)
	var i Quest
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Requirements,
		&i.Rewards,
	)
	return i, err
}
