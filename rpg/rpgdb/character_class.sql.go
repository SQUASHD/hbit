// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: character_class.sql

package rpgdb

import (
	"context"
)

const createCharacterClass = `-- name: CreateCharacterClass :one
INSERT INTO
    character_class (id, name, description)
VALUES
    (?, ?, ?) RETURNING id, name, description
`

type CreateCharacterClassParams struct {
	ID          string `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
}

func (q *Queries) CreateCharacterClass(ctx context.Context, arg CreateCharacterClassParams) (CharacterClass, error) {
	row := q.db.QueryRowContext(ctx, createCharacterClass, arg.ID, arg.Name, arg.Description)
	var i CharacterClass
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const deleteCharacterClass = `-- name: DeleteCharacterClass :exec
DELETE FROM
    character_class
WHERE
    id = ?
`

func (q *Queries) DeleteCharacterClass(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteCharacterClass, id)
	return err
}

const listCharacterClasses = `-- name: ListCharacterClasses :many
SELECT
    id, name, description
FROM
    character_class
`

func (q *Queries) ListCharacterClasses(ctx context.Context) ([]CharacterClass, error) {
	rows, err := q.db.QueryContext(ctx, listCharacterClasses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CharacterClass
	for rows.Next() {
		var i CharacterClass
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readCharacterClass = `-- name: ReadCharacterClass :one
SELECT
    id, name, description
FROM
    character_class
WHERE
    name = ?
`

func (q *Queries) ReadCharacterClass(ctx context.Context, name string) (CharacterClass, error) {
	row := q.db.QueryRowContext(ctx, readCharacterClass, name)
	var i CharacterClass
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const updateCharacterClass = `-- name: UpdateCharacterClass :one
UPDATE
    character_class
SET
    name = ?,
    description = ?
WHERE
    id = ? RETURNING id, name, description
`

type UpdateCharacterClassParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
	ID          string `json:"id"`
}

func (q *Queries) UpdateCharacterClass(ctx context.Context, arg UpdateCharacterClassParams) (CharacterClass, error) {
	row := q.db.QueryRowContext(ctx, updateCharacterClass, arg.Name, arg.Description, arg.ID)
	var i CharacterClass
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}
