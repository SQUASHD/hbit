// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: rpg.sql

package rpgdb

import (
	"context"
	"time"
)

const getUserRpgState = `-- name: GetUserRpgState :one
SELECT
    char_state.event_id, char_state.user_id, char_state.class_id, char_state.character_level, char_state.experience, char_state.health, char_state.mana, char_state.strength, char_state.dexterity, char_state.intelligence, char_state.timestamp,
    user_quest.quest_id AS user_quest_id,
    quest_info.quest_type,
    quest_info.description,
    quest_info.title,
    quest_info.details AS quest_details,
    user_quest.details AS user_quest_details,
    user_quest.completed AS quest_completed
FROM
    character_state char_state
    LEFT JOIN (
        SELECT
            user_id, quest_id, completed, timestamp, event_id, details
        FROM
            user_quest
        WHERE
            user_quest.user_id = ?
        ORDER BY
            timestamp DESC
        LIMIT
            1
    ) AS user_quest ON char_state.user_id = user_quest.user_id
    INNER JOIN quest AS quest_info ON user_quest.quest_id = quest_info.quest_id
WHERE
    char_state.user_id = ?
ORDER BY
    char_state.timestamp DESC
LIMIT
    1
`

type GetUserRpgStateParams struct {
	UserID   string `json:"user_id"`
	UserID_2 string `json:"user_id_2"`
}

type GetUserRpgStateRow struct {
	EventID          string    `json:"event_id"`
	UserID           string    `json:"user_id"`
	ClassID          string    `json:"class_id"`
	CharacterLevel   int64     `json:"character_level"`
	Experience       int64     `json:"experience"`
	Health           int64     `json:"health"`
	Mana             int64     `json:"mana"`
	Strength         int64     `json:"strength"`
	Dexterity        int64     `json:"dexterity"`
	Intelligence     int64     `json:"intelligence"`
	Timestamp        time.Time `json:"timestamp"`
	UserQuestID      string    `json:"user_quest_id"`
	QuestType        string    `json:"quest_type"`
	Description      string    `json:"description"`
	Title            string    `json:"title"`
	QuestDetails     string    `json:"quest_details"`
	UserQuestDetails string    `json:"user_quest_details"`
	QuestCompleted   bool      `json:"quest_completed"`
}

func (q *Queries) GetUserRpgState(ctx context.Context, arg GetUserRpgStateParams) (GetUserRpgStateRow, error) {
	row := q.db.QueryRowContext(ctx, getUserRpgState, arg.UserID, arg.UserID_2)
	var i GetUserRpgStateRow
	err := row.Scan(
		&i.EventID,
		&i.UserID,
		&i.ClassID,
		&i.CharacterLevel,
		&i.Experience,
		&i.Health,
		&i.Mana,
		&i.Strength,
		&i.Dexterity,
		&i.Intelligence,
		&i.Timestamp,
		&i.UserQuestID,
		&i.QuestType,
		&i.Description,
		&i.Title,
		&i.QuestDetails,
		&i.UserQuestDetails,
		&i.QuestCompleted,
	)
	return i, err
}
