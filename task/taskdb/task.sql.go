// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: task.sql

package taskdb

import (
	"context"
	"time"
)

const createTask = `-- name: CreateTask :one
INSERT INTO
    task (id, user_id, title)
VALUES
    (uuid4(), ?, ?) RETURNING id, user_id, title, text, is_completed, task_type, difficulty, created_at, updated_at
`

type CreateTaskParams struct {
	UserID string `json:"user_id"`
	Title  string `json:"title"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask, arg.UserID, arg.Title)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Text,
		&i.IsCompleted,
		&i.TaskType,
		&i.Difficulty,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM
    task
WHERE
    id = ?
`

func (q *Queries) DeleteTask(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteTask, id)
	return err
}

const deleteUserTasks = `-- name: DeleteUserTasks :exec
DELETE FROM
    task
WHERE
    user_id = ?
`

func (q *Queries) DeleteUserTasks(ctx context.Context, userID string) error {
	_, err := q.db.ExecContext(ctx, deleteUserTasks, userID)
	return err
}

const listTasks = `-- name: ListTasks :many
SELECT
    id, user_id, title, text, is_completed, task_type, difficulty, created_at, updated_at
FROM
    task
WHERE
    user_id = ?
`

func (q *Queries) ListTasks(ctx context.Context, userID string) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listTasks, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Text,
			&i.IsCompleted,
			&i.TaskType,
			&i.Difficulty,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readTask = `-- name: ReadTask :one
SELECT
    id, user_id, title, text, is_completed, task_type, difficulty, created_at, updated_at
FROM
    task
WHERE
    id = ?
`

func (q *Queries) ReadTask(ctx context.Context, id string) (Task, error) {
	row := q.db.QueryRowContext(ctx, readTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Text,
		&i.IsCompleted,
		&i.TaskType,
		&i.Difficulty,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateTask = `-- name: UpdateTask :one
UPDATE
    task
SET
    title = ?,
    text = ?,
    is_completed = ?,
    updated_at = ?,
    difficulty = ?
WHERE
    id = ? RETURNING id, user_id, title, text, is_completed, task_type, difficulty, created_at, updated_at
`

type UpdateTaskParams struct {
	Title       string    `json:"title"`
	Text        string    `json:"text"`
	IsCompleted bool      `json:"is_completed"`
	UpdatedAt   time.Time `json:"updated_at"`
	Difficulty  string    `json:"difficulty"`
	ID          string    `json:"id"`
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, updateTask,
		arg.Title,
		arg.Text,
		arg.IsCompleted,
		arg.UpdatedAt,
		arg.Difficulty,
		arg.ID,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Text,
		&i.IsCompleted,
		&i.TaskType,
		&i.Difficulty,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
