// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: item.sql

package database

import (
	"context"
)

const createItem = `-- name: CreateItem :one
INSERT INTO
    item (id, name, description, item_type, attributes)
VALUES
    (?, ?, ?, ?, ?) RETURNING id, name, description, item_type, attributes
`

type CreateItemParams struct {
	ID          string  `json:"id"`
	Name        string  `json:"name"`
	Description string  `json:"description"`
	ItemType    string  `json:"item_type"`
	Attributes  *string `json:"attributes"`
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, createItem,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.ItemType,
		arg.Attributes,
	)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ItemType,
		&i.Attributes,
	)
	return i, err
}

const deleteItem = `-- name: DeleteItem :exec
DELETE FROM
    item
WHERE
    id = ?
`

func (q *Queries) DeleteItem(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteItem, id)
	return err
}

const listItems = `-- name: ListItems :many
SELECT
    id, name, description, item_type, attributes
FROM
    item
`

func (q *Queries) ListItems(ctx context.Context) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, listItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.ItemType,
			&i.Attributes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readItem = `-- name: ReadItem :one
SELECT
    id, name, description, item_type, attributes
FROM
    item
WHERE
    id = ?
`

func (q *Queries) ReadItem(ctx context.Context, id string) (Item, error) {
	row := q.db.QueryRowContext(ctx, readItem, id)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ItemType,
		&i.Attributes,
	)
	return i, err
}

const updateItem = `-- name: UpdateItem :one
UPDATE
    item
SET
    name = ?,
    description = ?,
    item_type = ?,
    attributes = ?
WHERE
    id = ? RETURNING id, name, description, item_type, attributes
`

type UpdateItemParams struct {
	Name        string  `json:"name"`
	Description string  `json:"description"`
	ItemType    string  `json:"item_type"`
	Attributes  *string `json:"attributes"`
	ID          string  `json:"id"`
}

func (q *Queries) UpdateItem(ctx context.Context, arg UpdateItemParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, updateItem,
		arg.Name,
		arg.Description,
		arg.ItemType,
		arg.Attributes,
		arg.ID,
	)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ItemType,
		&i.Attributes,
	)
	return i, err
}
