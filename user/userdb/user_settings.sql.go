// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user_settings.sql

package userdb

import (
	"context"
)

const createUserSettings = `-- name: CreateUserSettings :one
INSERT INTO
    user_settings (
        user_id,
        theme,
        display_name,
        email,
        email_notifications
    )
VALUES
    (?, ?, ?, ?, ?) RETURNING user_id, theme, display_name, email, email_notifications, reset_time, user_timezone, created_at, updated_at
`

type CreateUserSettingsParams struct {
	UserID             string `json:"user_id"`
	Theme              string `json:"theme"`
	DisplayName        string `json:"display_name"`
	Email              string `json:"email"`
	EmailNotifications bool   `json:"email_notifications"`
}

func (q *Queries) CreateUserSettings(ctx context.Context, arg CreateUserSettingsParams) (UserSetting, error) {
	row := q.db.QueryRowContext(ctx, createUserSettings,
		arg.UserID,
		arg.Theme,
		arg.DisplayName,
		arg.Email,
		arg.EmailNotifications,
	)
	var i UserSetting
	err := row.Scan(
		&i.UserID,
		&i.Theme,
		&i.DisplayName,
		&i.Email,
		&i.EmailNotifications,
		&i.ResetTime,
		&i.UserTimezone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUserSettings = `-- name: DeleteUserSettings :exec
DELETE FROM
    user_settings
WHERE
    user_id = ?
`

func (q *Queries) DeleteUserSettings(ctx context.Context, userID string) error {
	_, err := q.db.ExecContext(ctx, deleteUserSettings, userID)
	return err
}

const readUserSettings = `-- name: ReadUserSettings :one
SELECT
    user_id, theme, display_name, email, email_notifications, reset_time, user_timezone, created_at, updated_at
FROM
    user_settings
WHERE
    user_id = ?
`

func (q *Queries) ReadUserSettings(ctx context.Context, userID string) (UserSetting, error) {
	row := q.db.QueryRowContext(ctx, readUserSettings, userID)
	var i UserSetting
	err := row.Scan(
		&i.UserID,
		&i.Theme,
		&i.DisplayName,
		&i.Email,
		&i.EmailNotifications,
		&i.ResetTime,
		&i.UserTimezone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserSettings = `-- name: UpdateUserSettings :one
UPDATE
    user_settings
SET
    theme = ?,
    display_name = ?,
    email = ?,
    email_notifications = ?
WHERE
    user_id = ? RETURNING user_id, theme, display_name, email, email_notifications, reset_time, user_timezone, created_at, updated_at
`

type UpdateUserSettingsParams struct {
	Theme              string `json:"theme"`
	DisplayName        string `json:"display_name"`
	Email              string `json:"email"`
	EmailNotifications bool   `json:"email_notifications"`
	UserID             string `json:"user_id"`
}

func (q *Queries) UpdateUserSettings(ctx context.Context, arg UpdateUserSettingsParams) (UserSetting, error) {
	row := q.db.QueryRowContext(ctx, updateUserSettings,
		arg.Theme,
		arg.DisplayName,
		arg.Email,
		arg.EmailNotifications,
		arg.UserID,
	)
	var i UserSetting
	err := row.Scan(
		&i.UserID,
		&i.Theme,
		&i.DisplayName,
		&i.Email,
		&i.EmailNotifications,
		&i.ResetTime,
		&i.UserTimezone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
